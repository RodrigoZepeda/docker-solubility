install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("devtools")
install.packages("usethis")
install.packages("usethis")
install.packages("ggplot2")
install.packages("rmarkdown")
install.packages("knitr")
RandomForestAnalysis <- read.csv("~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest/RandomForestAnalysis.csv")
View(RandomForestAnalysis)
dir <- setwd("~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest/")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest/")
model_name <- "Random Forest"
library("stringr")
dir_name   <- "~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/"
short_name <- gsub(" ","",model_name)
model_dir  <- gsub(" ", "_", tolower(model_name))
setwd(model_dir)
model_path <- paste0(dir_name,model_dir)
model_path
rforest <- read.csv(paste0(short_name,"Analysis.csv"))
setwd(model_path)
rforest <- read.csv(paste0(short_name,"Analysis.csv"))
short_name
(short_name,"Analysis.csv")
paste0(short_name,"Analysis.csv")
getwd()
model_path <- paste0(dir_name,model_dir,"/")
setwd(model_path)
rforest <- read.csv(paste0(short_name,"Analysis.csv"))
model_path <- paste0(dir_name,model_dir)
setwd(model_path)
rforest <- read.csv(paste0(short_name,"Analysis.csv"))
rforest <- read.csv(paste0(short_name,"Analysis.csv"))
rforest <- read.csv("~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest/RandomForestAnalysis.csv")
View(rforest)
rforest <- melt(rforest, id.vars=c("metric", "nestimators"))
library("ggplot2")
library("reshape2")
library("grid")
library("gridExtra")
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
rforest <- melt(rforest, id.vars=c("metric", "nestimators"))
maeplot <- ggplot(subset(rforest, metric == "mse")) +
geom_line(aes(x = round(log(nestimators,2)), y = value, color = variable)) +
theme_bw() + ylim(c(0,1)) +
ggtitle("Mean Absolute Error (MAE)\nfor fitted model") +
xlab("log2 number of estimators") +
ylab("MAE")
r2plot <- ggplot(subset(rforest, metric == "r2")) +
geom_line(aes(x = round(log(nestimators,2)), y = value, color = variable)) +
theme_bw() + ylim(c(0,1)) +
ggtitle("R²\nfor fitted model") +
xlab("log2 number of estimators") +
ylab("R²")
mylegend<-g_legend(maeplot)
grid.arrange(arrangeGrob(
maeplot + theme(legend.position="none"),
r2plot + theme(legend.position="none"), nrow=1),
mylegend, nrow=2, heights=c(6, 2))
mycsv <- paste0("predict_validation_32",".csv")
myfile <- read.csv("predict_train_32.csv")
mycsv <- paste0("predict_validation_",round(max(rforest$nestimators)),".csv")
mycsv
tval_file  <- paste0("predict_train_",round(max(rforest$nestimators)),".csv")
pval   <- read.csv(mycsv)
rval   <- read.csv(mycsv)
setwd("~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest")
pval_file  <- paste0("predict_validation_",round(max(rforest$nestimators)),".csv")
tval_file  <- paste0("predict_train_",round(max(rforest$nestimators)),".csv")
pval   <- read.csv(pval_file)
knitr::opts_knit$set(root.dir = model_path)
pval_file  <- paste0("predict_validation_",round(max(rforest$nestimators)),".csv")
tval_file  <- paste0("predict_train_",round(max(rforest$nestimators)),".csv")
pval   <- read.csv(pval_file)
rval   <- read.csv(tval_file)
#Get prediction data
pval_pred_file  <- paste0("predict_validation_",round(max(rforest$nestimators)),".csv")
tval_pred_file  <- paste0("predict_train_",round(max(rforest$nestimators)),".csv")
pval_pred  <- read.csv(pval_pred_file)
tval_pred  <- read.csv(tval_pred_file)
#Get prediction data
vval_pred_file  <- paste0("predict_validation_",round(max(rforest$nestimators)),".csv")
tval_pred_file  <- paste0("predict_train_",round(max(rforest$nestimators)),".csv")
vval_pred  <- read.csv(vval_pred_file)
tval_pred  <- read.csv(tval_pred_file)
#Get original data
vval_original <- read.csv("valid_original")
tval_original <- read.csv("train_original")
#Get original data
vval_original <- read.csv("valid_original.csv")
tval_original <- read.csv("train_original.csv")
#Errors
validation_errors <- vval_original - vval_pred
validation_errors
View(validation_errors)
vval_original
#Get prediction data
vval_pred_file  <- paste0("predict_validation_",round(max(rforest$nestimators)),".csv")
tval_pred_file  <- paste0("predict_train_",round(max(rforest$nestimators)),".csv")
vval_pred  <- read.csv(vval_pred_file)
tval_pred  <- read.csv(tval_pred_file)
#Get original data
vval_original <- read.csv("valid_original.csv")
tval_original <- read.csv("train_original.csv")
View(vval_original)
View(vval_pred)
#Errors
validation_errors <- vval_original$prediction - vval_pred$prediction
validation_errors
train_errors      <- tval_original$prediction - tval_pred$prediction
hist(ttrain_errors)
hist(train_errors)
hist(validation_errors)
summary_valid <- summary(validation_errors)
summary_train <- summary(train_errors)
summary_valid <- summary(validation_errors)
summary_train <- summary(train_errors)
summary_valid
summary_train
summary_df    <- data.frame(c("Validation errors" = summary_valid, "Train errors" = summary_train))
summary_df
View(summary_df)
summary_df    <- data.frame(list("Validation errors" = summary_valid, "Train errors" = summary_train))
summary_df    <- data.frame("Validation errors" = summary_valid, "Train errors" = summary_train)
summary_df    <- data.frame(summary_valid, summary_train)
?data.frame
summary_df    <- data.frame(ve = summary_valid, te = summary_train)
summary_valid <- summary(validation_errors)
summary_train <- summary(train_errors)
summary_df    <- data.frame(ve = summary_valid, te = summary_train)
summary_valid
summary_train
summary_df    <- data.frame(x = summary_valid, y = summary_train)
summary_valid
summary_train
summary_df    <- as.data.frame(cbind(summary_valid, summary_train))
summary_df
colnames(summary_df) <- c("Validation errors", "Train errors")
summary_df
summary_df    <- as.data.frame(cbind(summary_train, summary_valid))
colnames(summary_df) <- c("Train errors", "Validation errors")
summary_df
knitr::opts_chunk$set(echo = FALSE)
library("knitr")
library("stringr")
model_name <- "Random Forest"
dir_name   <- "~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/"
short_name <- gsub(" ","",model_name)
model_dir  <- gsub(" ", "_", tolower(model_name))
model_path <- paste0(dir_name,model_dir)
knitr::opts_knit$set(root.dir = model_path)
library("ggplot2")
library("reshape2")
library("grid")
library("gridExtra")
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
kable(summary_df)
summary_df    <- as.data.frame(cbind(summary_train, summary_valid))
summary_valid_abs <- summary(abs(validation_errors))
summary_train_abs <- summary(abs(train_errors))
summary_df    <- as.data.frame(cbind(summary_train, summary_train_abs, summary_valid, summary_valid_abs))
colnames(summary_df) <- c("Train errors", "Absolute Train errors", "Validation errors", "Absolute Validation errors")
kable(summary_df)
round(max(rforest$nestimators))
