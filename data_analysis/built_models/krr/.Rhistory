install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("devtools")
install.packages("usethis")
install.packages("usethis")
install.packages("ggplot2")
install.packages("rmarkdown")
install.packages("knitr")
RandomForestAnalysis <- read.csv("~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest/RandomForestAnalysis.csv")
View(RandomForestAnalysis)
dir <- setwd("~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest/")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/random_forest/")
data(solubility)
install.packages("AppliedPredictiveModeling")
library("AppliedPredictiveModeling")
data("solubility")
View(solTrainX)
View(solTestX)
View(solTestX)
solTrainX
solTrainY
solTestY
logS <- c(solTrainX,solTestY)
View(logS)
solTrainX
logS <- c(solTrainY,solTestY)
logS
exp(0.25)
library(tidyverse)
library(gganimate)
library(randomForest)
model <- randomForest(mpg ~ disp,
data = mtcars,
ntree = 500)
map_df(seq_len(500), ~
getTree(model, k = .x, labelVar = TRUE) %>%
filter(!is.na(`split var`)) %>%
mutate(id = .x)) %>%
ggplot(aes(`split point`, prediction)) +
geom_step(color = "darkblue") +
theme_minimal() +
transition_time(id) +
shadow_mark(alpha = 0.1, color = "black") +
labs(title = "Random forest of mtcars in action",
x = "disp", y = "mpg") +
coord_cartesian(xlim = range(mtcars$disp))
install.packages("tidyverse")
install.packages("randomForest")
install.packages("gganimate")
library(tidyverse)
library(gganimate)
library(randomForest)
model <- randomForest(mpg ~ disp,
data = mtcars,
ntree = 500)
map_df(seq_len(500), ~
getTree(model, k = .x, labelVar = TRUE) %>%
filter(!is.na(`split var`)) %>%
mutate(id = .x)) %>%
ggplot(aes(`split point`, prediction)) +
geom_step(color = "darkblue") +
theme_minimal() +
transition_time(id) +
shadow_mark(alpha = 0.1, color = "black") +
labs(title = "Random forest of mtcars in action",
x = "disp", y = "mpg") +
coord_cartesian(xlim = range(mtcars$disp))
library(tidyverse)
library(gganimate)
library(randomForest)
model <- randomForest(mpg ~ disp,
data = mtcars,
ntree = 500)
map_df(seq_len(500), ~
getTree(model, k = .x, labelVar = TRUE) %>%
filter(!is.na(`split var`)) %>%
mutate(id = .x)) %>%
ggplot(aes(`split point`, prediction)) +
geom_step(color = "darkblue") +
theme_minimal() +
transition_time(id) +
shadow_mark(alpha = 0.1, color = "black") +
labs(title = "Random forest of mtcars in action",
x = "disp", y = "mpg") +
coord_cartesian(xlim = range(mtcars$disp))
install.packages("transformr")
install.packages("sf")
knitr::opts_chunk$set(echo = FALSE)
library("knitr")
library("stringr")
model_name <- "KRR"
dir_name   <- "~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/"
short_name <- gsub(" ","",model_name)
model_dir  <- gsub(" ", "_", tolower(model_name))
model_path <- paste0(dir_name,model_dir)
model_path
knitr::opts_knit$set(root.dir = model_path)
library("ggplot2")
library("reshape2")
library("grid")
library("gridExtra")
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mymodel <- read.csv(paste0(short_name,"Analysis.csv"))
mymodel <- read.csv(paste0(short_name,"Analysis.csv"))
paste0(short_name,"Analysis.csv")
model_path
setwd(model_path)
mymodel <- read.csv(paste0(short_name,"Analysis.csv"))
getwd()
dcommand <- paste0("docker run --rm -v ~/PATH/TO_FILE/YOU_WANT_TO_WORK_ON/:/data docker-solubility ", short_name)
cat(noquote(dcommand))
dcommand <- paste0("docker run --rm -v ~/PATH/TO_FILE/YOU_WANT_TO_WORK_ON/:/data docker-solubility ", short_name)
cat(noquote(dcommand))
vval_pred  <- read.csv("predict_train.csv")
valid_original.csv
tval_pred  <- read.csv("predict_validation.csv")
tval_pred  <- read.csv(paste0(modelpath,"predict_validation.csv"))
tval_pred  <- read.csv(paste0(model_path,"predict_validation.csv"))
tval_pred  <- read.csv(paste0(model_path,"/predict_validation.csv"))
vval_pred  <- read.csv(paste0(model_path,"/predict_train.csv")
#Get original data
vval_original <- read.csv(paste0(model_path,"/valid_original.csv")
#Get original data
vval_original <- read.csv(paste0(model_path,"/valid_original.csv")
tval_original <- read.csv(paste0(model_path,"/train_original.csv")
vval_pred  <- read.csv(paste0(model_path,"/predict_train.csv"))
tval_pred  <- read.csv(paste0(model_path,"/predict_validation.csv"))
#Get original data
tval_original <- read.csv(paste0(model_path,"/train_original.csv")
#Get original data
vval_original <- read.csv(paste0(model_path,"/valid_original.csv"))
tval_original <- read.csv(paste0(model_path,"/train_original.csv"))
#Errors
validation_errors <- vval_original$prediction - vval_pred$prediction
train_errors      <- tval_original$prediction - tval_pred$prediction
#Get original data
vval_original <- read.csv(paste0(model_path,"/valid_original.csv"))
tval_original <- read.csv(paste0(model_path,"/train_original.csv"))
#Errors
validation_errors <- vval_original$prediction - vval_pred$prediction
train_errors      <- tval_original$prediction - tval_pred$prediction
summary_valid <- summary(validation_errors)
summary_train <- summary(train_errors)
summary_valid_abs <- summary(abs(validation_errors))
summary_train_abs <- summary(abs(train_errors))
summary_df    <- as.data.frame(cbind(summary_train, summary_train_abs, summary_valid, summary_valid_abs))
colnames(summary_df) <- c("Train errors", "Absolute Train errors", "Validation errors", "Absolute Validation errors")
kable(summary_df)
2
ggplot(data.frame(verrors = validation_errors, terrors = validation_errors))
ggplot(data.frame(verrors = validation_errors, terrors = train_errors)) + geom_density(aes(x = verrors))
ggplot(data.frame(verrors = validation_errors, terrors = train_errors)) + geom_density(aes(x = verrors)) + geom_density(aes(x = terrors))
ggplot(data.frame(errors = rbind(validation_errors, train_errors))
validation_errors <- as.data.frame(validation_errors)
validation_errors <- as.data.frame(validation_errors)
validation_errors <- as.data.frame(validation_errors)
train_errors      <- as.data.frame(train_errors)
validation_errors$type <- "Validation"
train_errors$type <- "Train"
ggplot(data.frame(errors = rbind(validation_errors, train_errors))
)
ggplot(data.frame(errors = rbind(validation_errors, train_errors)))
validation_errors
colnames(train_errors) <- c("errors")
ggplot(data.frame(errors = rbind(validation_errors, train_errors)))
ggplot(data.frame(errors = cbind(validation_errors, train_errors)))
ggplot(data.frame(errors = cbind(validation_errors, train_errors))) + geom_density(aes(x = errors, color = type))
validation_errors <- as.data.frame(validation_errors)
train_errors      <- as.data.frame(train_errors)
colnames(validation_errors) <- c("errors")
colnames(train_errors) <- c("errors")
validation_errors$type <- "Validation"
train_errors$type <- "Train"
ggplot(data.frame(errors = cbind(validation_errors, train_errors))) + geom_density(aes(x = errors, color = type))
ggplot(cbind(validation_errors, train_errors)) + geom_density(aes(x = errors, color = type))
cbind(validation_errors, train_errors)
#Errors
validation_errors <- vval_original$prediction - vval_pred$prediction
train_errors      <- tval_original$prediction - tval_pred$prediction
validation_errors <- as.data.frame(validation_errors)
train_errors      <- as.data.frame(train_errors)
colnames(validation_errors) <- c("errors")
colnames(train_errors) <- c("errors")
validation_errors$type <- "Validation"
train_errors$type <- "Train"
ggplot(cbind(validation_errors, train_errors)) + geom_density(aes(x = errors, color = type))
#Errors
validation_errors <- vval_original$prediction - vval_pred$prediction
train_errors      <- tval_original$prediction - tval_pred$prediction
validation_errors <- as.data.frame(validation_errors)
train_errors      <- as.data.frame(train_errors)
colnames(validation_errors) <- c("errors")
colnames(train_errors) <- c("errors")
validation_errors$type <- "Validation"
train_errors$type <- "Train"
ggplot(rbind(validation_errors, train_errors)) + geom_density(aes(x = errors, color = type))
ggplot(rbind(validation_errors, train_errors)) + geom_density(aes(x = errors, color = type)) +
theme_bw() + ggtitle("Errors Predicted log solubility - Experimental log solubility")
ggplot(rbind(validation_errors, train_errors)) + geom_density(aes(x = errors, color = type)) +
theme_bw() + ggtitle("Error:\nPredicted log solubility - Experimental log solubility")
knitr::opts_chunk$set(echo = FALSE)
library("knitr")
library("stringr")
model_name <- "Random Forest"
dir_name   <- "~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/"
short_name <- gsub(" ","",model_name)
model_dir  <- gsub(" ", "_", tolower(model_name))
model_path <- paste0(dir_name,model_dir)
knitr::opts_knit$set(root.dir = model_path)
library("ggplot2")
library("reshape2")
library("grid")
library("gridExtra")
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mymodel <- read.csv(paste0(short_name,"Analysis.csv"))
mymodel
View(mymodel)
?kable
kable(tail(mymodel1), row.names = FALSE)
vval_pred  <- read.csv(paste0(model_path,"/",model_name,"/Analysis.csv"))
paste0(model_path,"/",model_name,"/Analysis.csv")
library("knitr")
library("stringr")
model_name <- "KRR"
dir_name   <- "~/Dropbox/Quimica/Docker/docker-solubility/data_analysis/built_models/"
short_name <- gsub(" ","",model_name)
model_dir  <- gsub(" ", "_", tolower(model_name))
model_path <- paste0(dir_name,model_dir)
knitr::opts_knit$set(root.dir = model_path)
library("ggplot2")
library("reshape2")
library("grid")
library("gridExtra")
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
vval_pred
analysis  <- read.csv(paste0(model_path,"/",model_name,"/Analysis.csv"))
analysis  <- read.csv(paste0(model_path,"/",model_name,"Analysis.csv"))
kable(analysis)
analysis  <- read.csv(paste0(model_path,"/",model_name,"Analysis.csv"))
kable(analysis)
library(tidyverse)
library(gganimate)
library(randomForest)
model <- randomForest(mpg ~ disp,
data = mtcars,
ntree = 500)
map_df(seq_len(500), ~
getTree(model, k = .x, labelVar = TRUE) %>%
filter(!is.na(`split var`)) %>%
mutate(id = .x)) %>%
ggplot(aes(`split point`, prediction)) +
geom_step(color = "darkblue") +
theme_minimal() +
transition_time(id) +
shadow_mark(alpha = 0.1, color = "black") +
labs(title = "Random forest of mtcars in action",
x = "disp", y = "mpg") +
coord_cartesian(xlim = range(mtcars$disp))
